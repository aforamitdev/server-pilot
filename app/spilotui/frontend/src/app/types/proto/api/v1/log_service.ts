// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: proto/api/v1/log_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';

export const protobufPackage = 'spilot.api.v1';

export interface LogResponse {
  log: string;
}

export interface LogRequest {
  log: string;
}

function createBaseLogResponse(): LogResponse {
  return { log: '' };
}

export const LogResponse: MessageFns<LogResponse> = {
  encode(
    message: LogResponse,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.log !== '') {
      writer.uint32(10).string(message.log);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.log = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<LogResponse>): LogResponse {
    return LogResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LogResponse>): LogResponse {
    const message = createBaseLogResponse();
    message.log = object.log ?? '';
    return message;
  },
};

function createBaseLogRequest(): LogRequest {
  return { log: '' };
}

export const LogRequest: MessageFns<LogRequest> = {
  encode(
    message: LogRequest,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.log !== '') {
      writer.uint32(10).string(message.log);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.log = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<LogRequest>): LogRequest {
    return LogRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LogRequest>): LogRequest {
    const message = createBaseLogRequest();
    message.log = object.log ?? '';
    return message;
  },
};

export type LogServiceDefinition = typeof LogServiceDefinition;
export const LogServiceDefinition = {
  name: 'LogService',
  fullName: 'spilot.api.v1.LogService',
  methods: {
    getLogs: {
      name: 'GetLogs',
      requestType: LogRequest,
      requestStream: false,
      responseType: LogResponse,
      responseStream: true,
      options: {},
    },
  },
} as const;

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
