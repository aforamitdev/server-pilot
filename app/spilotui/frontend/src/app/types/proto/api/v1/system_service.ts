// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: proto/api/v1/system_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "spilot.api.v1";

export interface GetStatusRequest {
}

export interface GetStatusResponse {
  system: string;
}

function createBaseGetStatusRequest(): GetStatusRequest {
  return {};
}

export const GetStatusRequest: MessageFns<GetStatusRequest> = {
  encode(_: GetStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetStatusRequest>): GetStatusRequest {
    return GetStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetStatusRequest>): GetStatusRequest {
    const message = createBaseGetStatusRequest();
    return message;
  },
};

function createBaseGetStatusResponse(): GetStatusResponse {
  return { system: "" };
}

export const GetStatusResponse: MessageFns<GetStatusResponse> = {
  encode(message: GetStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.system !== "") {
      writer.uint32(10).string(message.system);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.system = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetStatusResponse>): GetStatusResponse {
    return GetStatusResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStatusResponse>): GetStatusResponse {
    const message = createBaseGetStatusResponse();
    message.system = object.system ?? "";
    return message;
  },
};

export type SystemServicesDefinition = typeof SystemServicesDefinition;
export const SystemServicesDefinition = {
  name: "SystemServices",
  fullName: "spilot.api.v1.SystemServices",
  methods: {
    getStatus: {
      name: "GetStatus",
      requestType: GetStatusRequest,
      requestStream: false,
      responseType: GetStatusResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
