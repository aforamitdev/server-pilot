// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: internal/proto/index.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ServerPilot_GetLogStream_FullMethodName = "/ServerPilot/GetLogStream"
)

// ServerPilotClient is the client API for ServerPilot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerPilotClient interface {
	GetLogStream(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (ServerPilot_GetLogStreamClient, error)
}

type serverPilotClient struct {
	cc grpc.ClientConnInterface
}

func NewServerPilotClient(cc grpc.ClientConnInterface) ServerPilotClient {
	return &serverPilotClient{cc}
}

func (c *serverPilotClient) GetLogStream(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (ServerPilot_GetLogStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServerPilot_ServiceDesc.Streams[0], ServerPilot_GetLogStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &serverPilotGetLogStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerPilot_GetLogStreamClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type serverPilotGetLogStreamClient struct {
	grpc.ClientStream
}

func (x *serverPilotGetLogStreamClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerPilotServer is the server API for ServerPilot service.
// All implementations must embed UnimplementedServerPilotServer
// for forward compatibility
type ServerPilotServer interface {
	GetLogStream(*LogRequest, ServerPilot_GetLogStreamServer) error
	mustEmbedUnimplementedServerPilotServer()
}

// UnimplementedServerPilotServer must be embedded to have forward compatible implementations.
type UnimplementedServerPilotServer struct {
}

func (UnimplementedServerPilotServer) GetLogStream(*LogRequest, ServerPilot_GetLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogStream not implemented")
}
func (UnimplementedServerPilotServer) mustEmbedUnimplementedServerPilotServer() {}

// UnsafeServerPilotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerPilotServer will
// result in compilation errors.
type UnsafeServerPilotServer interface {
	mustEmbedUnimplementedServerPilotServer()
}

func RegisterServerPilotServer(s grpc.ServiceRegistrar, srv ServerPilotServer) {
	s.RegisterService(&ServerPilot_ServiceDesc, srv)
}

func _ServerPilot_GetLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerPilotServer).GetLogStream(m, &serverPilotGetLogStreamServer{ServerStream: stream})
}

type ServerPilot_GetLogStreamServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type serverPilotGetLogStreamServer struct {
	grpc.ServerStream
}

func (x *serverPilotGetLogStreamServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ServerPilot_ServiceDesc is the grpc.ServiceDesc for ServerPilot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerPilot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServerPilot",
	HandlerType: (*ServerPilotServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLogStream",
			Handler:       _ServerPilot_GetLogStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/index.proto",
}
